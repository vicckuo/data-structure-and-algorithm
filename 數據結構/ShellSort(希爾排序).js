// ShellSort（希爾排序）
// 希爾排序是插入排序的一種更高效的改進版本，希爾排序是非穩定排序算法。
// 希爾排序是基於插入排序的以下兩點性質而提出改進方法的：
// 1. 插入排序在對幾乎已經排好序的數據操作時，效率高，即可以達到線性排序的效率
// 2. 但插入排序一般來說是低效的，因為插入排序每次只能將數據移動一位
// 希爾排序是把數列按照一定的間隔分為若干子數列，然後對子數列進行插入排序，逐次縮小間隔，直至間隔為1，最後對整個數列進行一次插入排序。
// 1. 希爾排序是非穩定排序算法
// 2. 時間複雜度為O(n^1.3)
// 3. 空間複雜度為O(1)
// 4. 適合中數據量排序
// 5. 適合部分數據已經排序好的情況
// 6. 適合數據量小且數據基本有序的情況
// 7. 不適合數據量大的排序
// 8. 不適合數據量小且數據基本無序的情況
// 9. 不適合數據量大且數據基本有序的情況

function ShellSort(arr) {
  let len = arr.length; // 數組長度
  let gap = Math.floor(len / 2); // 間隔
  while (gap > 0) {
    // 間隔大於0
    for (let i = gap; i < len; i++) {
      // 從間隔開始
      let temp = arr[i]; // 要插入的數
      let j = i; // 要插入的位置
      while (j >= gap && arr[j - gap] > temp) {
        // 從後往前找，找到要插入的位置
        arr[j] = arr[j - gap]; // 往後移
        j -= gap; // 往前找
      }
      arr[j] = temp; // 插入
    }
    gap = Math.floor(gap / 2); // 間隔縮小
  }
  return arr;
}

console.log(ShellSort([5, 3, 8, 6, 2, 7, 1, 4])); // [1, 2, 3, 4, 5, 6, 7, 8]
